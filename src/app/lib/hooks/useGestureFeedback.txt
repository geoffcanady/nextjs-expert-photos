import { useState, useEffect, useRef } from "react";
import { Result } from "@vladmandic/human";
import {
  GestureFeedbackMessages,
  GestureFeedbackMessagesType,
} from "@/app/lib/types/enums";

export const useGestureFeedback = (detectionResults: Result | null) => {
  const [gestureFeedbackMsg, setGestureFeedbackMsg] =
    useState<GestureFeedbackMessagesType>(GestureFeedbackMessages.Empty);
  const lastUpdateTime = useRef(0);
  const errorTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  /**
   * Destructure results.
   */
  const results = detectionResults;
  const face = results?.face[0];
  // const box = face?.box;
  const box = face?.boxRaw;
  const boxSize = face?.size;

  /**
   * Head rotation.
   * Pitch - chin up/down.
   * Roll - head tilted towards shoulder.
   * Yaw - chin left / right.
   */
  const pitch = parseFloat(face?.rotation?.angle?.pitch.toFixed(2) || "0");
  const roll = parseFloat(face?.rotation?.angle?.roll.toFixed(2) || "0");
  const yaw = parseFloat(face?.rotation?.angle?.yaw.toFixed(2) || "0");

  /**
   * The gesture feedback/guidance only displays one message at a time using the following prioritization:
   * 1. No head/face present.
   * 2. Hands present
   * 3. Distance / proximity
   * 4. Centered vertically / horizontally w/in the camera guide
   * 5. Chin turned left/right
   * 6. Chin tilted up/down
   * 7. Head tilted towards shoulders
   */

  const [minHeadSize, setMinHeadSize] = useState(360);
  const [maxHeadSize, setMaxHeadSize] = useState(580);
  const [minHeadXPos, setMinHeadXPos] = useState(0.18);
  const [maxHeadXPos, setMaxHeadXPos] = useState(0.4);
  const [minHeadYPos, setMinHeadYPos] = useState(0.15);
  const [maxHeadYPos, setMaxHeadYPos] = useState(0.3);
  const [minChinXPos, setMinChinXPos] = useState(-0.25);
  const [maxChinXPos, setMaxChinXPos] = useState(0.15);
  const [minChinYPos, setMinChinYPos] = useState(-0.3);
  const [maxChinYPos, setMaxChinYPos] = useState(0.25);

  const getFeedbackMessage = (): GestureFeedbackMessagesType => {
    /**
     * No face detected.
     */
    if (!boxSize || !face) return GestureFeedbackMessages.NoFace;

    /**
     * Hands.
     */
    if (results?.hand[0]?.score) return GestureFeedbackMessages.Hands;

    /**
     * Distance from camera.
     */
    // console.log("boxSize: ", boxSize?.[0]);
    if (boxSize && boxSize?.[0] < minHeadSize)
      return GestureFeedbackMessages.TooFar;
    if (boxSize && boxSize?.[0] > maxHeadSize)
      return GestureFeedbackMessages.TooClose;

    /**
     * Head centering. Values decrease left side of screen to right.
     */
    if (
      boxSize &&
      boxSize?.[0] > minHeadSize &&
      boxSize &&
      boxSize?.[0] < maxHeadSize
    ) {
      // console.log("box: ", box?.[0]);
      // Horizontal centering
      // Left side
      if (box && box?.[0] > maxHeadXPos)
        return GestureFeedbackMessages.OffCenter;
      // Right side
      if (box && box?.[0] < minHeadXPos)
        return GestureFeedbackMessages.OffCenter;
      // Vertical centering
      // Top
      // console.log("box: ", box?.[1]);
      if (box && box?.[1] < minHeadYPos)
        return GestureFeedbackMessages.OffCenter;
      // Bottom
      if (box && box?.[1] > maxHeadYPos)
        return GestureFeedbackMessages.OffCenter;
    }

    /**
     * Chin left / right
     */
    if (yaw < -0.25) return GestureFeedbackMessages.HeadTurnedLeft;
    if (yaw > 0.15) return GestureFeedbackMessages.HeadTurnedRight;

    /**
     * Chin up/down
     */
    if (pitch < -0.3) return GestureFeedbackMessages.HeadTiltedUp;
    if (pitch > 0.25) return GestureFeedbackMessages.HeadTiltedDown;

    /**
     * Head tilted towards shoulders
     */
    if (roll < -0.25) return GestureFeedbackMessages.HeadTiltedRight;
    if (roll > 0.25) return GestureFeedbackMessages.HeadTiltedLeft;

    // return GestureFeedbackMessages.Success;
  };

  useEffect(() => {
    /**
     * Updates the gesture feedback message based on detection results.
     * It manages the timing of feedback updates to avoid rapid state changes and flickering of the gesture feedback text in the UI.
     */
    const currentTime = Date.now();
    const feedbackMessage = getFeedbackMessage();

    // If no feedback message is received, reset the state to success.
    if (feedbackMessage === undefined) {
      lastUpdateTime.current = 0;
      if (errorTimeoutRef.current) {
        clearTimeout(errorTimeoutRef.current);
      }
      setGestureFeedbackMsg(GestureFeedbackMessages.Success);
      return;
    }

    // Prevent updates if the last feedback was within 5 seconds.
    if (currentTime - lastUpdateTime.current < 5000) {
      return;
    }

    lastUpdateTime.current = currentTime;

    // If a feedback message is detected, manage the display of the message.
    if (feedbackMessage !== undefined) {
      if (errorTimeoutRef.current) {
        clearTimeout(errorTimeoutRef.current);
      }

      // Clear feedback
      setGestureFeedbackMsg(GestureFeedbackMessages.Empty);

      // Set feedback message after 1 second
      // Clear feedback after 2 seconds
      errorTimeoutRef.current = setTimeout(() => {
        setGestureFeedbackMsg(feedbackMessage);
        setTimeout(() => {
          setGestureFeedbackMsg(GestureFeedbackMessages.Empty);
        }, 2000);
      }, 1000);
    }
  }, [detectionResults]);

  useEffect(() => {
    /**
     * Cleanup effect to clear any timeouts when the component is unmounted.
     */
    return () => {
      if (errorTimeoutRef.current) {
        clearTimeout(errorTimeoutRef.current);
      }
    };
  }, []);

  return { gestureFeedbackMsg };
};

export default useGestureFeedback;
